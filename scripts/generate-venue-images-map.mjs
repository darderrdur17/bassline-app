import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');

const imagesRoot = path.resolve(repoRoot, 'venue-images');
const outFile = path.join(repoRoot, 'bassline-app', 'src', 'data', 'venueImages.js');

const allowedExt = new Set(['.jpg', '.jpeg', '.png', '.webp']);

function listFilesRec(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  const files = [];
  for (const e of entries) {
    if (e.name.startsWith('.')) continue;
    const full = path.join(dir, e.name);
    if (e.isDirectory()) files.push(...listFilesRec(full));
    else files.push(full);
  }
  return files;
}

function baseKeyFromFilename(filename) {
  // Remove extension
  const ext = path.extname(filename);
  const name = path.basename(filename, ext);
  // Drop _<index> suffix if present
  const m = name.match(/^(.*?)(_([0-9]+))$/);
  const base = m ? m[1] : name;
  return base;
}

function buildMap() {
  const files = listFilesRec(imagesRoot).filter(f => allowedExt.has(path.extname(f).toLowerCase()));
  const map = new Map();
  for (const full of files) {
    const rel = path.relative(imagesRoot, full).replace(/\\/g, '/');
    const folder = rel.split('/')[0];
    const key = baseKeyFromFilename(rel.split('/').slice(1).join('/'));
    const entry = map.get(key) || { folder, paths: [] };
    entry.paths.push(rel);
    // Prefer folder from first occurrence
    if (!entry.folder) entry.folder = folder;
    map.set(key, entry);
  }
  // Sort gallery paths per key by numeric suffix if present
  for (const [, entry] of map) {
    entry.paths.sort((a, b) => {
      const an = a.match(/_(\d+)\.[^.]+$/);
      const bn = b.match(/_(\d+)\.[^.]+$/);
      const ai = an ? parseInt(an[1], 10) : 0;
      const bi = bn ? parseInt(bn[1], 10) : 0;
      return ai - bi;
    });
  }
  return map;
}

function generateJS(map) {
  const lines = [];
  lines.push('// Auto-generated by scripts/generate-venue-images-map.mjs');
  lines.push("export const venueImages = {");
  for (const [key, entry] of map) {
    // hero is first path or the one ending with _1
    const heroPath = entry.paths.find(p => /_(1)\.[^.]+$/.test(p)) || entry.paths[0];
    const galleryPaths = entry.paths.slice(0, 3);
    lines.push(`  ${JSON.stringify(key)}: {`);
    lines.push(`    hero: require('@venue-images/${heroPath.replace(/'/g, "\\'")}'),`);
    lines.push(`    gallery: [`);
    for (const p of galleryPaths) {
      lines.push(`      require('@venue-images/${p.replace(/'/g, "\\'")}'),`);
    }
    lines.push('    ],');
    lines.push('  },');
  }
  lines.push('};');
  lines.push('');
  lines.push('export function nameToImageKey(name) {');
  lines.push("  if (!name) return '';\n  return name\n    .replace(/'s\\b/gi, 's')\n    .replace(/[^A-Za-z0-9]+/g, '_')\n    .replace(/^_|_$/g, '');");
  lines.push('}');
  fs.writeFileSync(outFile, lines.join('\n'));
}

const map = buildMap();
generateJS(map);
console.log(`Wrote ${outFile}`);


